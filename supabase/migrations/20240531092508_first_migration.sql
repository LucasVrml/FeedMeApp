create extension if not exists "pg_trgm" with schema "public" version '1.6';

create table "public"."category" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null default ''::text,
    "user_id" uuid
);


create table "public"."friendship" (
    "created_at" timestamp with time zone not null default now(),
    "user_1" uuid not null default gen_random_uuid(),
    "user_2" uuid not null default gen_random_uuid(),
    "is_accepted" boolean not null default false
);


create table "public"."ingredient" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text default ''::text,
    "category" bigint
);


create table "public"."list" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "personal" boolean not null default false
);


create table "public"."list_additional_ingredients" (
    "list_id" bigint not null,
    "name" text,
    "checked" boolean default false,
    "id" bigint generated by default as identity not null
);


create table "public"."list_ingredient" (
    "list_id" bigint not null,
    "ingredient_id" bigint not null,
    "quantity" bigint,
    "unit" text not null,
    "checked" boolean default false
);


create table "public"."list_user" (
    "list_id" bigint not null,
    "user_id" uuid not null default gen_random_uuid()
);


create table "public"."recipe" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null default ''::text,
    "counter" integer default 1,
    "steps" text[] default '{}'::text[],
    "user_id" uuid default gen_random_uuid(),
    "image_url" text,
    "image_path" text
);


create table "public"."recipe_category" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "recipe_id" bigint not null,
    "category_id" bigint not null
);


create table "public"."recipe_ingredient" (
    "ingredient_id" bigint not null,
    "recipe_id" bigint not null,
    "quantity" real,
    "unit" text not null default ''::text
);


create table "public"."recipes_plan" (
    "created_at" timestamp with time zone not null default now(),
    "recipe_id" bigint not null,
    "date" date not null,
    "user_id" uuid not null default gen_random_uuid(),
    "count" bigint not null default '1'::bigint
);


create table "public"."user" (
    "id" uuid not null,
    "created_at" timestamp with time zone not null default now(),
    "full_name" text,
    "username" text not null,
    "first_name" text not null,
    "last_name" text not null,
    "premium" boolean not null default false,
    "last_ai_use" date
);


CREATE UNIQUE INDEX category_pkey ON public.category USING btree (id);

CREATE UNIQUE INDEX friendship_pkey ON public.friendship USING btree (user_1, user_2);

CREATE UNIQUE INDEX ingredient_pkey ON public.ingredient USING btree (id);

CREATE UNIQUE INDEX list_additional_ingredients_pkey ON public.list_additional_ingredients USING btree (list_id, id);

CREATE UNIQUE INDEX list_ingredient_pkey ON public.list_ingredient USING btree (list_id, ingredient_id, unit);

CREATE UNIQUE INDEX list_pkey ON public.list USING btree (id);

CREATE UNIQUE INDEX list_user_pkey ON public.list_user USING btree (list_id, user_id);

CREATE UNIQUE INDEX recipe_category_pkey ON public.recipe_category USING btree (recipe_id, category_id);

CREATE UNIQUE INDEX recipe_ingredient_pkey ON public.recipe_ingredient USING btree (ingredient_id, recipe_id, unit);

CREATE UNIQUE INDEX recipe_pkey ON public.recipe USING btree (id);

CREATE UNIQUE INDEX recipes_plan_pkey ON public.recipes_plan USING btree (recipe_id, date, user_id);

CREATE UNIQUE INDEX user_username_key ON public."user" USING btree (username);

CREATE UNIQUE INDEX users_pkey ON public."user" USING btree (id);

alter table "public"."category" add constraint "category_pkey" PRIMARY KEY using index "category_pkey";

alter table "public"."friendship" add constraint "friendship_pkey" PRIMARY KEY using index "friendship_pkey";

alter table "public"."ingredient" add constraint "ingredient_pkey" PRIMARY KEY using index "ingredient_pkey";

alter table "public"."list" add constraint "list_pkey" PRIMARY KEY using index "list_pkey";

alter table "public"."list_additional_ingredients" add constraint "list_additional_ingredients_pkey" PRIMARY KEY using index "list_additional_ingredients_pkey";

alter table "public"."list_ingredient" add constraint "list_ingredient_pkey" PRIMARY KEY using index "list_ingredient_pkey";

alter table "public"."list_user" add constraint "list_user_pkey" PRIMARY KEY using index "list_user_pkey";

alter table "public"."recipe" add constraint "recipe_pkey" PRIMARY KEY using index "recipe_pkey";

alter table "public"."recipe_category" add constraint "recipe_category_pkey" PRIMARY KEY using index "recipe_category_pkey";

alter table "public"."recipe_ingredient" add constraint "recipe_ingredient_pkey" PRIMARY KEY using index "recipe_ingredient_pkey";

alter table "public"."recipes_plan" add constraint "recipes_plan_pkey" PRIMARY KEY using index "recipes_plan_pkey";

alter table "public"."user" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."category" add constraint "public_category_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "user"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."category" validate constraint "public_category_user_id_fkey";

alter table "public"."friendship" add constraint "public_friendship_user_1_fkey" FOREIGN KEY (user_1) REFERENCES "user"(id) ON DELETE CASCADE not valid;

alter table "public"."friendship" validate constraint "public_friendship_user_1_fkey";

alter table "public"."friendship" add constraint "public_friendship_user_2_fkey" FOREIGN KEY (user_2) REFERENCES "user"(id) ON DELETE CASCADE not valid;

alter table "public"."friendship" validate constraint "public_friendship_user_2_fkey";

alter table "public"."list_additional_ingredients" add constraint "public_list_additional_ingredients_list_id_fkey" FOREIGN KEY (list_id) REFERENCES list(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."list_additional_ingredients" validate constraint "public_list_additional_ingredients_list_id_fkey";

alter table "public"."list_ingredient" add constraint "public_list_ingredient_ingredient_id_fkey" FOREIGN KEY (ingredient_id) REFERENCES ingredient(id) ON UPDATE CASCADE not valid;

alter table "public"."list_ingredient" validate constraint "public_list_ingredient_ingredient_id_fkey";

alter table "public"."list_ingredient" add constraint "public_list_ingredient_list_id_fkey" FOREIGN KEY (list_id) REFERENCES list(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."list_ingredient" validate constraint "public_list_ingredient_list_id_fkey";

alter table "public"."list_user" add constraint "public_list_user_list_id_fkey" FOREIGN KEY (list_id) REFERENCES list(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."list_user" validate constraint "public_list_user_list_id_fkey";

alter table "public"."list_user" add constraint "public_list_user_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "user"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."list_user" validate constraint "public_list_user_user_id_fkey";

alter table "public"."recipe" add constraint "public_recipe_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "user"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."recipe" validate constraint "public_recipe_user_id_fkey";

alter table "public"."recipe_category" add constraint "public_recipe_category_category_id_fkey" FOREIGN KEY (category_id) REFERENCES category(id) ON DELETE CASCADE not valid;

alter table "public"."recipe_category" validate constraint "public_recipe_category_category_id_fkey";

alter table "public"."recipe_category" add constraint "public_recipe_category_recipe_id_fkey" FOREIGN KEY (recipe_id) REFERENCES recipe(id) ON DELETE CASCADE not valid;

alter table "public"."recipe_category" validate constraint "public_recipe_category_recipe_id_fkey";

alter table "public"."recipe_ingredient" add constraint "public_recipe_ingredient_ingredient_id_fkey" FOREIGN KEY (ingredient_id) REFERENCES ingredient(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."recipe_ingredient" validate constraint "public_recipe_ingredient_ingredient_id_fkey";

alter table "public"."recipe_ingredient" add constraint "public_recipe_ingredient_recipe_id_fkey" FOREIGN KEY (recipe_id) REFERENCES recipe(id) ON DELETE CASCADE not valid;

alter table "public"."recipe_ingredient" validate constraint "public_recipe_ingredient_recipe_id_fkey";

alter table "public"."recipes_plan" add constraint "public_recipes_plan_recipe_id_fkey" FOREIGN KEY (recipe_id) REFERENCES recipe(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."recipes_plan" validate constraint "public_recipes_plan_recipe_id_fkey";

alter table "public"."recipes_plan" add constraint "public_recipes_plan_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "user"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."recipes_plan" validate constraint "public_recipes_plan_user_id_fkey";

alter table "public"."user" add constraint "public_user_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user" validate constraint "public_user_id_fkey";

alter table "public"."user" add constraint "user_username_key" UNIQUE using index "user_username_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.find_similar_ingredient(input_name text)
 RETURNS TABLE(id integer, name text)
 LANGUAGE plpgsql
AS $function$
DECLARE
    found_ingredient RECORD;
BEGIN
    -- Essayer de trouver un ingrédient existant similaire
    SELECT ig.id, ig.name INTO found_ingredient
    FROM ingredient ig
    WHERE ig.name % input_name
    ORDER BY SIMILARITY(ig.name, input_name) DESC
    LIMIT 1;

    -- Si on trouve un ingrédient, on le retourne
    IF FOUND THEN
        id := found_ingredient.id;
        name := found_ingredient.name;
        RETURN NEXT;
    ELSE
        -- S'il n'y a pas d'ingrédient similaire, créer un nouvel ingrédient
        INSERT INTO ingredient (name) VALUES (input_name)
        RETURNING id, name INTO found_ingredient;

        id := found_ingredient.id;
        name := found_ingredient.name;
        RETURN NEXT;
    END IF;

    -- Aucun autre ingrédient à retourner
    RETURN;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.generate_username(full_name text, email text)
 RETURNS text
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$

DECLARE
  username_new text;
  username_length int := 30; -- you can adjust the starting length
  username_exists boolean;
BEGIN
  -- Generate username based on full name without spaces
  username_new = lower(regexp_replace(full_name, '[^\w]+', '', 'g'));

  -- Try to create a username with 5 characters
  username_new = substr(username_new, 1, username_length);

  -- Check if username already exists in profiles table
  SELECT EXISTS(SELECT 1 FROM public.user WHERE username = username_new) INTO username_exists;

  -- Increase username length gradually if needed
  WHILE username_exists AND username_length < length(username_new) LOOP
    username_length := username_length + 1;
    username_new = substr(username_new, 1, username_length);
    SELECT EXISTS(SELECT 1 FROM public.user WHERE username = username_new) INTO username_exists;
  END LOOP;

  -- If username still exists, try with underscore and check again
  IF username_exists THEN
    username_new = lower(regexp_replace(full_name, '[^\w]+', '_', 'g'));
    SELECT EXISTS(SELECT 1 FROM public.user WHERE username = username_new) INTO username_exists;
  END IF;

  -- If username still exists, try with hyphen and check again
  IF username_exists THEN
    username_new = lower(regexp_replace(full_name, '[^\w]+', '-', 'g'));
    SELECT EXISTS(SELECT 1 FROM public.user WHERE username = username_new) INTO username_exists;
  END IF;

  -- If username still exists, try with email prefix and check again
  IF username_exists THEN
    username_new = lower(split_part(email, '@', 1)) || '_' || username_new;
    SELECT EXISTS(SELECT 1 FROM public.user WHERE username = username_new) INTO username_exists;
  END IF;

  -- Increase username length gradually if needed
  WHILE username_exists LOOP
    username_new = username_new || '_' || to_char(trunc(random()*1000000), 'FM000000');
    SELECT EXISTS(SELECT 1 FROM public.user WHERE username = username_new) INTO username_exists;
  END LOOP;

  RETURN username_new;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_user_lists_with_ingredients_and_users_and_additional_ingred(p_user_id uuid)
 RETURNS TABLE(id bigint, name text, personal boolean, ingredients json, users json, additional_ingredients json)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY
    WITH user_lists AS (
        SELECT l.id, l.name, l.personal
        FROM list l
        INNER JOIN list_user lu ON l.id = lu.list_id
        WHERE lu.user_id = p_user_id
    )
    SELECT
        ul.id,
        ul.name,
        ul.personal,
        json_agg(
            json_build_object(
                'id', li.ingredient_id,
                'name', i.name,
                'quantity', li.quantity,
                'unit', li.unit,
                'checked', li.checked
            )
        ) AS ingredients,
        (SELECT json_agg(
                    json_build_object(
                        'id', u.id,
                        'name', u.full_name
                    )
                )
         FROM list_user lu2
         INNER JOIN "user" u ON lu2.user_id = u.id
         WHERE lu2.list_id = ul.id
        ) AS users,
        (SELECT json_agg(
                    json_build_object(
                        'id', lai.id,
                        'name', lai.name,
                        'checked', lai.checked
                    )
                )
         FROM list_additional_ingredients lai
         WHERE lai.list_id = ul.id
        ) AS additional_ingredients
    FROM user_lists ul
    LEFT JOIN list_ingredient li ON ul.id = li.list_id
    LEFT JOIN ingredient i ON li.ingredient_id = i.id
    GROUP BY ul.id, ul.name, ul.personal;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.user (id, full_name, username, first_name, last_name)
  values (
    new.id, 
    new.raw_user_meta_data->>'full_name', 
    public.generate_username(new.raw_user_meta_data->>'full_name', new.email), -- Generate Username
    new.raw_user_meta_data->>'first_name', 
    new.raw_user_meta_data->>'last_name');
  return new;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user_list()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
DECLARE
    NEW_list_id int8;
begin
  insert into public.list (name, personal)
  VALUES ('Ma liste de course', TRUE)
  RETURNING id INTO NEW_list_id;

  INSERT INTO public.list_user (list_id, user_id)
  VALUES (NEW_list_id, new.id);
  return new;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.upsert_list_ingredient(list_id_param integer, ingredients jsonb)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
    ingredient JSONB;
BEGIN
    FOR ingredient IN SELECT * FROM jsonb_array_elements(ingredients)
    LOOP
        INSERT INTO list_ingredient (list_id, ingredient_id, quantity, unit, checked)
        VALUES (
            list_id_param, 
            (ingredient->>'ingredient_id')::INT, 
            (ingredient->>'quantity')::NUMERIC, 
            ingredient->>'unit',
            (ingredient->>'checked')::BOOLEAN
        )
        ON CONFLICT (list_id, ingredient_id, unit)
        DO UPDATE SET quantity = list_ingredient.quantity + EXCLUDED.quantity;
    END LOOP;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.upsert_list_ingredient(user_id_param integer, list_id_param integer, ingredients jsonb)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
    ingredient JSONB;
BEGIN
    FOR ingredient IN SELECT * FROM jsonb_array_elements(ingredients)
    LOOP
        INSERT INTO list_ingredient (list_id, ingredient_id, quantity, unit, checked)
        VALUES (
            list_id_param, 
            (ingredient->>'ingredient_id')::INT, 
            (ingredient->>'quantity')::NUMERIC, 
            ingredient->>'unit',
            (ingredient->>'checked')::BOOLEAN
        )
        ON CONFLICT (list_id, ingredient_id, unit)
        DO UPDATE SET quantity = list_ingredient.quantity + EXCLUDED.quantity;
    END LOOP;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.upsert_user_ingredient(user_id_param uuid, ingredients jsonb)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
    ingredient JSONB;
BEGIN
    FOR ingredient IN SELECT * FROM jsonb_array_elements(ingredients)
    LOOP
        INSERT INTO user_ingredient (user_id, ingredient_id, count, unit)
        VALUES (
            user_id_param, 
            (ingredient->>'ingredient_id')::INT, 
            (ingredient->>'quantity')::NUMERIC, 
            ingredient->>'unit'
        )
        ON CONFLICT (user_id, ingredient_id, unit)
        DO UPDATE SET count = user_ingredient.count + EXCLUDED.count;
    END LOOP;
END;
$function$
;

grant delete on table "public"."category" to "anon";

grant insert on table "public"."category" to "anon";

grant references on table "public"."category" to "anon";

grant select on table "public"."category" to "anon";

grant trigger on table "public"."category" to "anon";

grant truncate on table "public"."category" to "anon";

grant update on table "public"."category" to "anon";

grant delete on table "public"."category" to "authenticated";

grant insert on table "public"."category" to "authenticated";

grant references on table "public"."category" to "authenticated";

grant select on table "public"."category" to "authenticated";

grant trigger on table "public"."category" to "authenticated";

grant truncate on table "public"."category" to "authenticated";

grant update on table "public"."category" to "authenticated";

grant delete on table "public"."category" to "service_role";

grant insert on table "public"."category" to "service_role";

grant references on table "public"."category" to "service_role";

grant select on table "public"."category" to "service_role";

grant trigger on table "public"."category" to "service_role";

grant truncate on table "public"."category" to "service_role";

grant update on table "public"."category" to "service_role";

grant delete on table "public"."friendship" to "anon";

grant insert on table "public"."friendship" to "anon";

grant references on table "public"."friendship" to "anon";

grant select on table "public"."friendship" to "anon";

grant trigger on table "public"."friendship" to "anon";

grant truncate on table "public"."friendship" to "anon";

grant update on table "public"."friendship" to "anon";

grant delete on table "public"."friendship" to "authenticated";

grant insert on table "public"."friendship" to "authenticated";

grant references on table "public"."friendship" to "authenticated";

grant select on table "public"."friendship" to "authenticated";

grant trigger on table "public"."friendship" to "authenticated";

grant truncate on table "public"."friendship" to "authenticated";

grant update on table "public"."friendship" to "authenticated";

grant delete on table "public"."friendship" to "service_role";

grant insert on table "public"."friendship" to "service_role";

grant references on table "public"."friendship" to "service_role";

grant select on table "public"."friendship" to "service_role";

grant trigger on table "public"."friendship" to "service_role";

grant truncate on table "public"."friendship" to "service_role";

grant update on table "public"."friendship" to "service_role";

grant delete on table "public"."ingredient" to "anon";

grant insert on table "public"."ingredient" to "anon";

grant references on table "public"."ingredient" to "anon";

grant select on table "public"."ingredient" to "anon";

grant trigger on table "public"."ingredient" to "anon";

grant truncate on table "public"."ingredient" to "anon";

grant update on table "public"."ingredient" to "anon";

grant delete on table "public"."ingredient" to "authenticated";

grant insert on table "public"."ingredient" to "authenticated";

grant references on table "public"."ingredient" to "authenticated";

grant select on table "public"."ingredient" to "authenticated";

grant trigger on table "public"."ingredient" to "authenticated";

grant truncate on table "public"."ingredient" to "authenticated";

grant update on table "public"."ingredient" to "authenticated";

grant delete on table "public"."ingredient" to "service_role";

grant insert on table "public"."ingredient" to "service_role";

grant references on table "public"."ingredient" to "service_role";

grant select on table "public"."ingredient" to "service_role";

grant trigger on table "public"."ingredient" to "service_role";

grant truncate on table "public"."ingredient" to "service_role";

grant update on table "public"."ingredient" to "service_role";

grant delete on table "public"."list" to "anon";

grant insert on table "public"."list" to "anon";

grant references on table "public"."list" to "anon";

grant select on table "public"."list" to "anon";

grant trigger on table "public"."list" to "anon";

grant truncate on table "public"."list" to "anon";

grant update on table "public"."list" to "anon";

grant delete on table "public"."list" to "authenticated";

grant insert on table "public"."list" to "authenticated";

grant references on table "public"."list" to "authenticated";

grant select on table "public"."list" to "authenticated";

grant trigger on table "public"."list" to "authenticated";

grant truncate on table "public"."list" to "authenticated";

grant update on table "public"."list" to "authenticated";

grant delete on table "public"."list" to "service_role";

grant insert on table "public"."list" to "service_role";

grant references on table "public"."list" to "service_role";

grant select on table "public"."list" to "service_role";

grant trigger on table "public"."list" to "service_role";

grant truncate on table "public"."list" to "service_role";

grant update on table "public"."list" to "service_role";

grant delete on table "public"."list_additional_ingredients" to "anon";

grant insert on table "public"."list_additional_ingredients" to "anon";

grant references on table "public"."list_additional_ingredients" to "anon";

grant select on table "public"."list_additional_ingredients" to "anon";

grant trigger on table "public"."list_additional_ingredients" to "anon";

grant truncate on table "public"."list_additional_ingredients" to "anon";

grant update on table "public"."list_additional_ingredients" to "anon";

grant delete on table "public"."list_additional_ingredients" to "authenticated";

grant insert on table "public"."list_additional_ingredients" to "authenticated";

grant references on table "public"."list_additional_ingredients" to "authenticated";

grant select on table "public"."list_additional_ingredients" to "authenticated";

grant trigger on table "public"."list_additional_ingredients" to "authenticated";

grant truncate on table "public"."list_additional_ingredients" to "authenticated";

grant update on table "public"."list_additional_ingredients" to "authenticated";

grant delete on table "public"."list_additional_ingredients" to "service_role";

grant insert on table "public"."list_additional_ingredients" to "service_role";

grant references on table "public"."list_additional_ingredients" to "service_role";

grant select on table "public"."list_additional_ingredients" to "service_role";

grant trigger on table "public"."list_additional_ingredients" to "service_role";

grant truncate on table "public"."list_additional_ingredients" to "service_role";

grant update on table "public"."list_additional_ingredients" to "service_role";

grant delete on table "public"."list_ingredient" to "anon";

grant insert on table "public"."list_ingredient" to "anon";

grant references on table "public"."list_ingredient" to "anon";

grant select on table "public"."list_ingredient" to "anon";

grant trigger on table "public"."list_ingredient" to "anon";

grant truncate on table "public"."list_ingredient" to "anon";

grant update on table "public"."list_ingredient" to "anon";

grant delete on table "public"."list_ingredient" to "authenticated";

grant insert on table "public"."list_ingredient" to "authenticated";

grant references on table "public"."list_ingredient" to "authenticated";

grant select on table "public"."list_ingredient" to "authenticated";

grant trigger on table "public"."list_ingredient" to "authenticated";

grant truncate on table "public"."list_ingredient" to "authenticated";

grant update on table "public"."list_ingredient" to "authenticated";

grant delete on table "public"."list_ingredient" to "service_role";

grant insert on table "public"."list_ingredient" to "service_role";

grant references on table "public"."list_ingredient" to "service_role";

grant select on table "public"."list_ingredient" to "service_role";

grant trigger on table "public"."list_ingredient" to "service_role";

grant truncate on table "public"."list_ingredient" to "service_role";

grant update on table "public"."list_ingredient" to "service_role";

grant delete on table "public"."list_user" to "anon";

grant insert on table "public"."list_user" to "anon";

grant references on table "public"."list_user" to "anon";

grant select on table "public"."list_user" to "anon";

grant trigger on table "public"."list_user" to "anon";

grant truncate on table "public"."list_user" to "anon";

grant update on table "public"."list_user" to "anon";

grant delete on table "public"."list_user" to "authenticated";

grant insert on table "public"."list_user" to "authenticated";

grant references on table "public"."list_user" to "authenticated";

grant select on table "public"."list_user" to "authenticated";

grant trigger on table "public"."list_user" to "authenticated";

grant truncate on table "public"."list_user" to "authenticated";

grant update on table "public"."list_user" to "authenticated";

grant delete on table "public"."list_user" to "service_role";

grant insert on table "public"."list_user" to "service_role";

grant references on table "public"."list_user" to "service_role";

grant select on table "public"."list_user" to "service_role";

grant trigger on table "public"."list_user" to "service_role";

grant truncate on table "public"."list_user" to "service_role";

grant update on table "public"."list_user" to "service_role";

grant delete on table "public"."recipe" to "anon";

grant insert on table "public"."recipe" to "anon";

grant references on table "public"."recipe" to "anon";

grant select on table "public"."recipe" to "anon";

grant trigger on table "public"."recipe" to "anon";

grant truncate on table "public"."recipe" to "anon";

grant update on table "public"."recipe" to "anon";

grant delete on table "public"."recipe" to "authenticated";

grant insert on table "public"."recipe" to "authenticated";

grant references on table "public"."recipe" to "authenticated";

grant select on table "public"."recipe" to "authenticated";

grant trigger on table "public"."recipe" to "authenticated";

grant truncate on table "public"."recipe" to "authenticated";

grant update on table "public"."recipe" to "authenticated";

grant delete on table "public"."recipe" to "service_role";

grant insert on table "public"."recipe" to "service_role";

grant references on table "public"."recipe" to "service_role";

grant select on table "public"."recipe" to "service_role";

grant trigger on table "public"."recipe" to "service_role";

grant truncate on table "public"."recipe" to "service_role";

grant update on table "public"."recipe" to "service_role";

grant delete on table "public"."recipe_category" to "anon";

grant insert on table "public"."recipe_category" to "anon";

grant references on table "public"."recipe_category" to "anon";

grant select on table "public"."recipe_category" to "anon";

grant trigger on table "public"."recipe_category" to "anon";

grant truncate on table "public"."recipe_category" to "anon";

grant update on table "public"."recipe_category" to "anon";

grant delete on table "public"."recipe_category" to "authenticated";

grant insert on table "public"."recipe_category" to "authenticated";

grant references on table "public"."recipe_category" to "authenticated";

grant select on table "public"."recipe_category" to "authenticated";

grant trigger on table "public"."recipe_category" to "authenticated";

grant truncate on table "public"."recipe_category" to "authenticated";

grant update on table "public"."recipe_category" to "authenticated";

grant delete on table "public"."recipe_category" to "service_role";

grant insert on table "public"."recipe_category" to "service_role";

grant references on table "public"."recipe_category" to "service_role";

grant select on table "public"."recipe_category" to "service_role";

grant trigger on table "public"."recipe_category" to "service_role";

grant truncate on table "public"."recipe_category" to "service_role";

grant update on table "public"."recipe_category" to "service_role";

grant delete on table "public"."recipe_ingredient" to "anon";

grant insert on table "public"."recipe_ingredient" to "anon";

grant references on table "public"."recipe_ingredient" to "anon";

grant select on table "public"."recipe_ingredient" to "anon";

grant trigger on table "public"."recipe_ingredient" to "anon";

grant truncate on table "public"."recipe_ingredient" to "anon";

grant update on table "public"."recipe_ingredient" to "anon";

grant delete on table "public"."recipe_ingredient" to "authenticated";

grant insert on table "public"."recipe_ingredient" to "authenticated";

grant references on table "public"."recipe_ingredient" to "authenticated";

grant select on table "public"."recipe_ingredient" to "authenticated";

grant trigger on table "public"."recipe_ingredient" to "authenticated";

grant truncate on table "public"."recipe_ingredient" to "authenticated";

grant update on table "public"."recipe_ingredient" to "authenticated";

grant delete on table "public"."recipe_ingredient" to "service_role";

grant insert on table "public"."recipe_ingredient" to "service_role";

grant references on table "public"."recipe_ingredient" to "service_role";

grant select on table "public"."recipe_ingredient" to "service_role";

grant trigger on table "public"."recipe_ingredient" to "service_role";

grant truncate on table "public"."recipe_ingredient" to "service_role";

grant update on table "public"."recipe_ingredient" to "service_role";

grant delete on table "public"."recipes_plan" to "anon";

grant insert on table "public"."recipes_plan" to "anon";

grant references on table "public"."recipes_plan" to "anon";

grant select on table "public"."recipes_plan" to "anon";

grant trigger on table "public"."recipes_plan" to "anon";

grant truncate on table "public"."recipes_plan" to "anon";

grant update on table "public"."recipes_plan" to "anon";

grant delete on table "public"."recipes_plan" to "authenticated";

grant insert on table "public"."recipes_plan" to "authenticated";

grant references on table "public"."recipes_plan" to "authenticated";

grant select on table "public"."recipes_plan" to "authenticated";

grant trigger on table "public"."recipes_plan" to "authenticated";

grant truncate on table "public"."recipes_plan" to "authenticated";

grant update on table "public"."recipes_plan" to "authenticated";

grant delete on table "public"."recipes_plan" to "service_role";

grant insert on table "public"."recipes_plan" to "service_role";

grant references on table "public"."recipes_plan" to "service_role";

grant select on table "public"."recipes_plan" to "service_role";

grant trigger on table "public"."recipes_plan" to "service_role";

grant truncate on table "public"."recipes_plan" to "service_role";

grant update on table "public"."recipes_plan" to "service_role";

grant delete on table "public"."user" to "anon";

grant insert on table "public"."user" to "anon";

grant references on table "public"."user" to "anon";

grant select on table "public"."user" to "anon";

grant trigger on table "public"."user" to "anon";

grant truncate on table "public"."user" to "anon";

grant update on table "public"."user" to "anon";

grant delete on table "public"."user" to "authenticated";

grant insert on table "public"."user" to "authenticated";

grant references on table "public"."user" to "authenticated";

grant select on table "public"."user" to "authenticated";

grant trigger on table "public"."user" to "authenticated";

grant truncate on table "public"."user" to "authenticated";

grant update on table "public"."user" to "authenticated";

grant delete on table "public"."user" to "service_role";

grant insert on table "public"."user" to "service_role";

grant references on table "public"."user" to "service_role";

grant select on table "public"."user" to "service_role";

grant trigger on table "public"."user" to "service_role";

grant truncate on table "public"."user" to "service_role";

grant update on table "public"."user" to "service_role";


